//
// Created by matteo on 9/16/21.
//

#include "VtkEngine.hpp"

VtkEngine::VtkEngine(Simulation &s, unsigned int n_steps) : WIDTH(s.get_width()), HEIGHT(s.get_height()), STEPS(n_steps), simulation(s) {}

VtkEngine::~VtkEngine() = default;

void VtkEngine::run() {
  unsigned int cur_step = 0;
  char fname[80];
  FILE *fp = NULL;

  while(cur_step <= STEPS) {
    sprintf(fname, "%d_step.vtk", cur_step);
    fp = fopen(fname, "w");
    if(fp == NULL) {
      // TODO: throw error
    }
    // Write header, then step with simulation then render
    simulation.render_VTK(fp);
    fclose(fp);
    simulation.step();
    cur_step += 1;
  }
}

void VtkEngine::write_header(FILE *file) {
  if(file == nullptr){
    // TODO: Throw error
  }

  // Write preamble
  fprintf(file,"# vtk DataFile Version 2.0\n");
  fprintf(file,"generated by LBM simulator (written by Brunello Matteo) \n");
  fprintf(file,"ASCII\n");
  fprintf(file,"\n");
  fprintf(file,"DATASET STRUCTURED_GRID\n");
  fprintf(file,"DIMENSIONS  %i %i %i \n", WIDTH, HEIGHT);
  fprintf(file,"POINTS %i integer\n", WIDTH * HEIGHT);
  fprintf(file,"\n");

  // Write point coordinates
  for(int x = 0; x < WIDTH; x++) {
    for(int y = 0; y < HEIGHT; y++) {
      fprintf(file, "%d %d\n", x, y);
    }
  }
}

